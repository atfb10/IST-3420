# Show highest to lowest average score
dir_avg$director_name <- reorder(dir_avg$director_name, dir_avg$avg_score)
# Visualization of highest scoring actors
ggplot(dir_avg, aes(x = avg_score, y = director_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = director_name)) + # Makes a point graph with different colors per director
theme(axis.text = element_text(size = 10, colour = 'navy')) + # Sets font size
ggtitle("Director Scores") +  # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Director Name") # Changes y field table
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
setwd("D:/College Work/Junior Year/IST 3420/Project/Files")
movies <- read.csv("movie_metadata CSV.csv", header = TRUE)
movie_df <- as.data.frame(movies)
str(movie_df)
# Create new vector, positive means budget was lower than gross, negative means that budget exceeds gross
gross_profit <- movie_df$gross - movie_df$budget
# bind the vector profit to the data frame
movie_df <- cbind(movie_df, gross_profit)
# Remove the Â at the end of the titles
movie_df$movie_title <- gsub("Â", "", movie_df$movie_title)
# Trim off the whitespace
movie_df$movie_title <- trimws(movie_df$movie_title)
# Show number of unique titles
length(unique(movie_df$movie_title))
# Show number of duplicated titles
anyDuplicated(movie_df$movie_title)
movie_df <- movie_df[!duplicated(movie_df$movie_title),]
library(ggplot2)
library(plyr)
# Find actors with highest average movie score
actor_rating_df <- ddply(movie_df, c("actor_1_name"), summarise, # Pull out actor 1 and rating data
actor_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of actors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(actor_rating_df) <- c("actor_name", "avg_score", "num_of_movies") # Rename headers
actor_avg <- actor_rating_df[which(actor_rating_df$num_of_movies >= 7),]# Actors in at least 7 movies to avoid skew
actor_avg <- actor_avg[which(actor_avg$avg_score >= 7.15),] # Show only highest scoring actors for readability
# Convert actor_name to a factor
actor_avg$actor_name <- factor(actor_avg$actor_name)
# Show highest to lowest average score
actor_avg$actor_name <- reorder(actor_avg$actor_name, actor_avg$avg_score)
# Visualization of highest scoring actors
ggplot(actor_avg, aes(x = avg_score, y = actor_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = actor_name)) + # Makes a point graph with different colors per actor
theme(axis.text = element_text(size = 10)) + # Sets font size
ggtitle("Actor Scores") + # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Actor Name")  # Changes y field table
# Find actors with highest average movie score
dir_rating_df <- ddply(movie_df, c("director_name"), summarise, # Pull out director name and rating data
dir_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of directors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(dir_rating_df) <- c("director_name", "avg_score", "num_of_movies") # Rename headers
dir_avg <- dir_rating_df[which(dir_rating_df$num_of_movies >= 7),]# Direct  at least 7 movies to avoid skew
dir_avg <- dir_avg[which(dir_avg$avg_score >= 7.5),] # Show only highest scoring directors for readability
dir_avg <- dir_avg[which(dir_avg$director_name != ''),] # Exclude movies who have no director name
# Convert actor_name to a factor
dir_avg$director_name <- factor(dir_avg$director_name)
# Show highest to lowest average score
dir_avg$director_name <- reorder(dir_avg$director_name, dir_avg$avg_score)
# Visualization of highest scoring actors
ggplot(dir_avg, aes(x = avg_score, y = director_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = director_name)) + # Makes a point graph with different colors per director
theme(axis.text = element_text(size = 10, colour = 'black')) + # Sets font size
ggtitle("Director Scores") +  # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Director Name") # Changes y field table
content_df <- ddply(movie_df, c("content_rating"), summarise,
mean(movie_df$imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
View(content_df)
View(content_df)
View(content_df)
View(actor_rating_df)
View(content_df)
content_df <- ddply(movie_df, c("content_rating"), summarise,
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
View(content_df)
View(content_df)
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films")
View(content_df)
content_df <- content_df[which(content_df$content_rating != ""),]
View(content_df)
str(content_df)
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue')) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
str(content_df)
content_df$avg_score <- factor(content_df$avg_score)
str(content_df)
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
content_df$avg_score <- factor(content_df$avg_score)
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue')) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df$avg_score <- numeric(content_df$avg_score)
str(content_df)
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue')) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = avg_score, y = content_rating)) +
geom_bar(aes(colour = 'blue')) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue'), stat = "avg_score") +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue'), stat = avg_score) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue'), stat = "avg_score") +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue'), stat = "identity") +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(aes(colour = 'blue'), stat = "identity", width = .5) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score, fill = 'blue')) +
geom_bar(aes(colour = 'blue'), stat = "identity", width = .5) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score, fill = 'blue')) +
geom_bar(stat = "identity", width = .5) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score, fill = 'navy')) +
geom_bar(stat = "identity", width = .5) +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(stat = "identity", width = .5, fill = 'black') +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(stat = "identity", width = .5, fill = 'blue') +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(stat = "identity", width = .5, fill = 'lightblue') +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
ggplot(content_df, aes(x = content_rating, y = avg_score)) +
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue4') +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
ggplot(content_df, aes(x = content_rating, y = avg_score)) + #
geom_bar(stat = "identity", width = .5, fill = 'cadeblue3') +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
ggplot(content_df, aes(x = content_rating, y = avg_score)) + #
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') +
theme(axis.text = element_text(size = 8, colour = 'black')) +
ggtitle("Content Scores") +
xlab("Content Rating") +
ylab("IMDB Score")
summary(movie_df)
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE),
length(na.omit(imdb_score)))
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) + # Bar graph with x as rating and y as score
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') + # Creates space between bars and changes color
theme(axis.text = element_text(size = 8, colour = 'black', angle = 90)) + # Sets text size to 8 and text color to black
ggtitle("Content Scores") + # Title of graph
xlab("Content Rating") + # Title of x axis
ylab("IMDB Score") # Title of y axis
install.packages("Hmsic")
install.packages("xtable")
library(xtable)
install.packages("installr")
library(installr)
updateR()
updateR()
library(installr)
updateR()
library(xtable)
movies <- read.csv("movie_metadata CSV.csv", header = TRUE)
movie_df <- as.data.frame(movies)
str(movie_df)
# Create new vector, positive means budget was lower than gross, negative means that budget exceeds gross
gross_profit <- movie_df$gross - movie_df$budget
# bind the vector profit to the data frame
movie_df <- cbind(movie_df, gross_profit)
# Remove the Â at the end of the titles
movie_df$movie_title <- gsub("Â", "", movie_df$movie_title)
# Trim off the whitespace
movie_df$movie_title <- trimws(movie_df$movie_title)
# Show number of unique titles
length(unique(movie_df$movie_title))
# Show number of duplicated titles
anyDuplicated(movie_df$movie_title)
movie_df <- movie_df[!duplicated(movie_df$movie_title),]
summary(movie_df)
# Load xtable for better looking correlation table, note: you might need to install this package
library(xtable)
corstars(movie_df[,], result = "html")
cor(movie_df, use = "Everything", method = "Pearson")
cor(movie_df, use = ,method = "Pearson")
cor(movie_df, use = ,method = "pearson")
cor(movie_df$imdb_score, use = ,method = "pearson")
cor(movie_df$imdb_score, movie_df$duration)
cor(movie_df$imdb_score, movie_df$director_name)
cor(movie_df$imdb_score, movie_df$director_facebook_likes)
cor(movie_df$imdb_score, movie_df$director_facebook_likes, method = "pearson", use = "complete.obs")
cor(movie_df$imdb_score, movie_df$director_facebook_likes, method = "kendall", use = "complete.obs")
cor(movie_df$imdb_score, movie_df$director_facebook_likes, method = "spearman", use = "complete.obs")
cor(movie_df$imdb_score, movie_df$director_facebook_likes, method = "budget", use = "complete.obs")
cor(movie_df$imdb_score, movie_df$budget, method = "pearson", use = "complete.obs")
cor(movie_df$imdb_score, movie_df$budget, method = "kendall", use = "complete.obs")
cor(movie_df$imdb_score, movie_df$budget, method = "spearman", use = "complete.obs")
kevin <- cor(movie_df)
kevin <- cor(movie_df$imdb_score)
View(movie_df)
head_movies <- head(movie_df, n = 10)
cor(head_movies)
rm(head_movies)
content_df2 <- filter(movie_df$content_rating != '')
content_df2 <- movie_df(movie_df$content_rating != '')
content_df2 <- movie_df$content_rating != ''
content_df2 <- movie_df[which(movie_df$content_rating != ''), ]
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE), # Creates column containing mean scores
length(na.omit(imdb_score))) # Omits scores with NA values
rm(list = ls())
setwd("D:/College Work/Junior Year/IST 3420/Project/Files")
movies <- read.csv("movie_metadata CSV.csv", header = TRUE)
movie_df <- as.data.frame(movies)
str(movie_df)
# Create new vector, positive means budget was lower than gross, negative means that budget exceeds gross
gross_profit <- movie_df$gross - movie_df$budget
# bind the vector profit to the data frame
movie_df <- cbind(movie_df, gross_profit)
# Remove the Â at the end of the titles
movie_df$movie_title <- gsub("Â", "", movie_df$movie_title)
# Trim off the whitespace
movie_df$movie_title <- trimws(movie_df$movie_title)
# Show number of unique titles
length(unique(movie_df$movie_title))
# Show number of duplicated titles
anyDuplicated(movie_df$movie_title)
movie_df <- movie_df[!duplicated(movie_df$movie_title),]
summary(movie_df)
library(ggplot2)
library(plyr)
# Find actors with highest average movie score
actor_rating_df <- ddply(movie_df, c("actor_1_name"), summarise, # Pull out actor 1 and rating data
actor_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of actors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(actor_rating_df) <- c("actor_name", "avg_score", "num_of_movies") # Rename headers
actor_avg <- actor_rating_df[which(actor_rating_df$num_of_movies >= 7),]# Actors in at least 7 movies to avoid skew
actor_avg <- actor_avg[which(actor_avg$avg_score >= 7.15),] # Show only highest scoring actors for readability
# Convert actor_name to a factor
actor_avg$actor_name <- factor(actor_avg$actor_name)
# Show highest to lowest average score
actor_avg$actor_name <- reorder(actor_avg$actor_name, actor_avg$avg_score)
# Visualization of highest scoring actors
ggplot(actor_avg, aes(x = avg_score, y = actor_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = actor_name)) + # Makes a point graph with different colors per actor
theme(axis.text = element_text(size = 10)) + # Sets font size
ggtitle("Actor Scores") + # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Actor Name")  # Changes y field table
# Find actors with highest average movie score
dir_rating_df <- ddply(movie_df, c("director_name"), summarise, # Pull out director name and rating data
dir_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of directors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(dir_rating_df) <- c("director_name", "avg_score", "num_of_movies") # Rename headers
dir_avg <- dir_rating_df[which(dir_rating_df$num_of_movies >= 7),]# Direct  at least 7 movies to avoid skew
dir_avg <- dir_avg[which(dir_avg$avg_score >= 7.5),] # Show only highest scoring directors for readability
dir_avg <- dir_avg[which(dir_avg$director_name != ''),] # Exclude movies who have no director name
# Convert actor_name to a factor
dir_avg$director_name <- factor(dir_avg$director_name)
# Show highest to lowest average score
dir_avg$director_name <- reorder(dir_avg$director_name, dir_avg$avg_score)
# Visualization of highest scoring actors
ggplot(dir_avg, aes(x = avg_score, y = director_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = director_name)) + # Makes a point graph with different colors per director
theme(axis.text = element_text(size = 10, colour = 'black')) + # Sets font size
ggtitle("Director Scores") +  # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Director Name") # Changes y field table
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE), # Creates column containing mean scores
length(na.omit(imdb_score))) # Omits scores with NA values
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) + # Bar graph with x as rating and y as score
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') + # Creates space between bars and changes color
theme(axis.text = element_text(size = 8, colour = 'black', angle = 90)) + # Sets text size to 8, text color to black, and angles text for separation purposes
ggtitle("Content Scores") + # Title of graph
xlab("Content Rating") + # Title of x axis
ylab("IMDB Score") # Title of y axis
content_df2 <- movie_df[which(movie_df$content_rating != ''), ]
View(content_df2)
install.packages("plotly")
library(plotly)
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE), # Creates column containing mean scores
length(na.omit(imdb_score))) # Omits scores with NA values
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) + # Bar graph with x as rating and y as score
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') + # Creates space between bars and changes color
theme(axis.text = element_text(size = 8, colour = 'black', angle = 90)) + # Sets text size to 8, text color to black, and angles text for separation purposes
ggtitle("Content Scores") + # Title of graph
xlab("Content Rating") + # Title of x axis
ylab("IMDB Score") # Title of y axis
plot_ly(content_df2, x = imdb_score, color = content_rating, type = "box")
View(content_df2)
plot_ly(content_df2, x = content_df2$imdb_score, color = content_df2$content_rating, type = "box")
ggplot(content_df2, aes(x = imdb_score, y = content_rating)) +
geom_point() + geom_boxplot()
ggplot(content_df2, aes(x = imdb_score, y = content_rating, fill = content_rating)) +
geom_point() + geom_boxplot()
ggplot(content_df2, aes(x = imdb_score, y = content_rating, fill = content_rating)) +
geom_point(size = .5) + geom_boxplot(colour = content_rating)
ggplot(content_df2, aes(x = imdb_score, y = content_rating, fill = content_rating)) +
geom_point(size = .5) + geom_boxplot(colour = content_df2content_rating)
ggplot(content_df2, aes(x = imdb_score, y = content_rating, fill = content_rating)) +
geom_point(size = .5) + geom_boxplot(colour = content_df2$content_rating)
# Create data frame that excludes movies with no content rating
content_df2 <- movie_df[which(movie_df$content_rating != ''), ]
#install plotly for great boxplot capabilities, note: Might need to install "plotly"
install.packages("plotly")
library(plotly)
plot_ly(content_df2, x = content_df2$imdb_score, color = content_df2$content_rating, type = "box")
install.packages("plotly")
setwd("D:\College Work\Junior Year\IST 3420\Homework - Files")
setwd("D:/College Work/Junior Year/IST 3420/Homework - Files")
retail_df <- read.csv("top100retailers2015.cvs", header = T)
retail_df <- read.csv("top100retailers2015.csV", header = T)
setwd("D:\College Work\Junior Year\IST 3420\Homework - Code\Homework 3")
setwd("D:/College Work/Junior Year/IST 3420/Homework - Code/Homework 3")
retail_df <- read.csv("top100retailers2015.csV", header = T)
str(retail_df)
retail_df$RetailSales2014 <- gsub("[,$]", "", RetailSales2014)
View(retail_df)
gsub("[,$]", "", RetailSales2014)
gsub("[,$]", "", retail_df$RetailSales2014)
View(retail_df)
retail_df$RetailSales2014 <- gsub("[,$]", "", retail_df$RetailSales2014)
View(retail_df)
retail_df$RetailSales2014 <- as.character(retail_df$RetailSales2014)
retail_df$RetailSales2014 <- as.factor(retail_df$RetailSales2014)
str(retail_df)
(retail_df$RetailSales2014)
retail_df$RetailSales2014 <- as.character(retail_df$RetailSales2014)
retail_df$RetailSales2014 <- as.numeric(retail_df$RetailSales2014)
str(retail_df)
cars_df <- data("mtcars")
cars_df <- data("mtcars")
cars_df <- data("mtcars")
data("mtcars")
str(mtcars)
View(mtcars)
mtcars <- mtcars[order(-mtcars$mpg),]
View(mtcars)
mtcars <- mtcars[order(mtcars$hp),]
View(mtcars)
mtcars <- mtcars[order(-mtcars$hp, -mtcars$mpg),]
View(mtcars)
mpg_vs_weight <- mtcars[c("mpg", weight),]
mpg_vs_weight <- mtcars[c("mpg", "wt"),]
View(mpg_vs_weight)
mpg_vs_weight <- mtcars[c("mpg", "wt")]
View(mpg_vs_weight)
mpg_vs_weight <- mpg_vs_weight[order(-mpg_vs_weight$mpg),]
View(mpg_vs_weight)
View(mtcars)
View(mtcars)
not_am <- mtcars[c(-"am")]
not_am <- mtcars[c(-9)]
View(not_am)
interested_cars <- mtcars[which(mtcars$mpg > 25 & mtcars$cyl>=6)]
interested_cars <- mtcars[which(mtcars$mpg > 25 & mtcars$cyl>=6),]
View(interested_cars)
interested_cars <- mtcars[which(mtcars$mpg > 25 & mtcars$cyl>=4),]
View(interested_cars)
interested_cars <- mtcars[which(mtcars$mpg > 25 & mtcars$hp>65),]
View(interested_cars)
