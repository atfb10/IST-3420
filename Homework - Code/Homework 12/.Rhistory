geom_smooth(method = lm) +
ggtitle("Voted User & Score Linear Regression")+
ylab("IMDB Score") +
xlab("Voted Users")
ggplot(small_movie_df, aes(x = movie_facebook_likes, y = num_critic_for_reviews)) +
geom_point(shape = 1) +
geom_smooth(method = lm, color = "Green") +
ggtitle("Facebook likes and # of critc review regression") +
ylab("# of Critic Reviews") +
xlab("Move facebook likes")
# Create data frame with year and average score
yearly_score <- ddply(movie_df, c("title_year"), summarise,
mean(imdb_score, na.rm = TRUE))
colnames(yearly_score) <- c("title_year", "avg_score")
# Plotly line graph that shows average imdb scores across the years
plot_ly(yearly_score, x = yearly_score$title_year, y = yearly_score$avg_score, type = "scatter", mode = "lines") %>%
layout(title = "Year and Score")
# Find actors with highest average movie score
actor_rating_df <- ddply(movie_df, c("actor_1_name"), summarise, # Pull out actor 1 and rating data
actor_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of actors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(actor_rating_df) <- c("actor_name", "avg_score", "num_of_movies") # Rename headers
actor_avg <- actor_rating_df[which(actor_rating_df$num_of_movies >= 7),]# Actors in at least 7 movies to avoid skew
actor_avg <- actor_avg[which(actor_avg$avg_score >= 7.15),] # Show only highest scoring actors for readability
# Convert actor_name to a factor
actor_avg$actor_name <- factor(actor_avg$actor_name)
# Show highest to lowest average score
actor_avg$actor_name <- reorder(actor_avg$actor_name, actor_avg$avg_score)
# Visualization of highest scoring actors
ggplot(actor_avg, aes(x = avg_score, y = actor_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = actor_name)) + # Makes a point graph with different colors per actor
theme(axis.text = element_text(size = 10)) + # Sets font size
ggtitle("Actor Scores") + # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Actor Name")  # Changes y field table
# Find actors with highest average movie score
dir_rating_df <- ddply(movie_df, c("director_name"), summarise, # Pull out director name and rating data
dir_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of directors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(dir_rating_df) <- c("director_name", "avg_score", "num_of_movies") # Rename headers
dir_avg <- dir_rating_df[which(dir_rating_df$num_of_movies >= 7),]# Direct  at least 7 movies to avoid skew
dir_avg <- dir_avg[which(dir_avg$avg_score >= 7.5),] # Show only highest scoring directors for readability
dir_avg <- dir_avg[which(dir_avg$director_name != ''),] # Exclude movies who have no director name
# Convert actor_name to a factor
dir_avg$director_name <- factor(dir_avg$director_name)
# Show highest to lowest average score
dir_avg$director_name <- reorder(dir_avg$director_name, dir_avg$avg_score)
# Visualization of highest scoring actors
ggplot(dir_avg, aes(x = avg_score, y = director_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = director_name)) + # Makes a point graph with different colors per director
theme(axis.text = element_text(size = 10, colour = 'black')) + # Sets font size
ggtitle("Director Scores") +  # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Director Name") # Changes y field table
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE), # Creates column containing mean scores
length(na.omit(imdb_score))) # Omits scores with NA values
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) + # Bar graph with x as rating and y as score
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') + # Creates space between bars and changes color
theme(axis.text = element_text(size = 8, colour = 'black', angle = 90)) + # Sets text size to 8, text color to black, and angles text for separation purposes
ggtitle("Content Scores") + # Title of graph
xlab("Content Rating") + # Title of x axis
ylab("IMDB Score") # Title of y axis
# Create data frame that excludes movies with no content rating
content_df2 <- movie_df[which(movie_df$content_rating != ''), ]
#Use plotly for great boxplot capabilities, note: Might need to install "plotly"
plot_ly(content_df2, x = content_df2$imdb_score, color = content_df2$content_rating, type = "box") %>%
layout(title = "Movie Type and Score Range")
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
rm(list = ls())
library(dplyr)
library(magrittr)
telecom_df <- read.csv("Telco-Customer-Churn.csv", header = T)
# Remove missing data
# telecom_df <- na.omit(telecom_df)
# See current type of Churn
class(telecom_df$Churn)
levels(telecom_df$Churn)
# Create Churn column with 1 as yes and 0 as no
telecom_df$Churn <- ifelse(telecom_df$Churn=="Yes", 1, 0)
class(telecom_df$Churn)
summary(telecom_df)
# Take length of 1 divided by total number of observations multiply by 100 and round decimal to 1
round(length(which(telecom_df$Churn == 1))/length(telecom_df$Churn) * 100, 1)
# Load Package
library(MASS)
# Regress mpg on all other variables
fit <- lm(Churn ~ ., data = telecom_df)
# Perform stepwise model selection
step <- stepAIC(fit, direction = "both")
# Show the results
step$anova
# Regress churn on other variables
# telecom_df <- na.omit(telecom_df)
final_linear <- lm(Churn ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
data = telecom_df)
# Show summary of final fit regression model
summary(final_linear)
detach("package:MASS", unload = F)
# Regress churn on other variables
final_logistic <- glm(Churn ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges, family=binomial(link='logit'),
data = telecom_df)
# Show the summary of logistic regression results
summary(final_logistic)
library(stargazer)
stargazer(final_linear, final_logistic, type = "text", star.cutoffs = c(0.05, 0.01, 0.001),
title="Multiple Linear vs. Logistic Regression", digits=4)
# Fit null model
null_model <- glm(Churn ~ 1,family=binomial(link='logit'),data=telecom_df)
# Show likelihood of null model
logLik(null_model)
cat("McFadden pseudo R2 = ", 1-logLik(final_logistic)/logLik(null_model))
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
rm(list = ls())
library(dplyr)
library(magrittr)
telecom_df <- read.csv("Telco-Customer-Churn.csv", header = T)
# Remove missing data
# telecom_df <- na.omit(telecom_df)
# See current type of Churn
class(telecom_df$Churn)
levels(telecom_df$Churn)
# Create Churn column with 1 as yes and 0 as no
telecom_df$Churn <- ifelse(telecom_df$Churn=="Yes", 1, 0)
class(telecom_df$Churn)
summary(telecom_df)
# Take length of 1 divided by total number of observations multiply by 100 and round decimal to 1
round(length(which(telecom_df$Churn == 1))/length(telecom_df$Churn) * 100, 1)
# Load Package
library(MASS)
# Regress mpg on all other variables
fit <- lm(Churn ~ ., data = telecom_df)
# Perform stepwise model selection
step <- stepAIC(fit, direction = "both")
# Show the results
step$anova
# Regress churn on other variables
# telecom_df <- na.omit(telecom_df)
final_linear <- lm(Churn ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
data = telecom_df)
# Show summary of final fit regression model
summary(final_linear)
detach("package:MASS", unload = F)
# Regress churn on other variables
final_logistic <- glm(Churn ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges, family=binomial(link='logit'),
data = telecom_df)
# Show the summary of logistic regression results
summary(final_logistic)
library(stargazer)
stargazer(final_linear, final_logistic, type = "text", star.cutoffs = c(0.05, 0.01, 0.001),
title="Multiple Linear vs. Logistic Regression", digits=4)
# Fit null model
null_model <- glm(Churn ~ 1,family=binomial(link='logit'),data=telecom_df)
# Show likelihood of null model
logLik(null_model)
cat("McFadden pseudo R2 = ", 1-logLik(final_logistic)/logLik(null_model))
View(fit)
View(telecom_df)
is.na(telecom_df)
length(is.na(telecom_df))
sum(is.na(telecom_df))
sum(is.na(telecom_df))
# Fit null model
null_model <- glm(Churn ~ 1,family=binomial(link='logit'),data=telecom_df)
# Show likelihood of null model
logLik(null_model)
cat("McFadden pseudo R2 = ", 1-logLik(final_logistic)/logLik(null_model))
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
rm(list = ls())
library(dplyr)
library(magrittr)
telecom_df <- read.csv("Telco-Customer-Churn.csv", header = T)
# Remove missing data
# telecom_df <- na.omit(telecom_df)
# See current type of Churn
class(telecom_df$Churn)
levels(telecom_df$Churn)
# Create Churn column with 1 as yes and 0 as no
telecom_df$Churn <- ifelse(telecom_df$Churn=="Yes", 1, 0)
class(telecom_df$Churn)
summary(telecom_df)
# Take length of 1 divided by total number of observations multiply by 100 and round decimal to 1
round(length(which(telecom_df$Churn == 1))/length(telecom_df$Churn) * 100, 1)
# Load Package
library(MASS)
# Regress mpg on all other variables
fit <- lm(Churn ~ ., data = telecom_df)
# Perform stepwise model selection
step <- stepAIC(fit, direction = "both")
# Show the results
step$anova
# Regress churn on other variables
# telecom_df <- na.omit(telecom_df)
final_linear <- lm(Churn ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
data = telecom_df)
# Show summary of final fit regression model
summary(final_linear)
detach("package:MASS", unload = F)
# Regress churn on other variables
final_logistic <- glm(Churn ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges, family=binomial(link='logit'),
data = telecom_df)
# Show the summary of logistic regression results
summary(final_logistic)
library(stargazer)
stargazer(final_linear, final_logistic, type = "text", star.cutoffs = c(0.05, 0.01, 0.001),
title="Multiple Linear vs. Logistic Regression", digits=4)
sum(is.na(telecom_df))
# Fit null model
null_model <- glm(Churn ~ 1,family=binomial(link='logit'),data=telecom_df)
# Show likelihood of null model
logLik(null_model)
cat("McFadden pseudo R2 = ", 1-logLik(final_logistic)/logLik(null_model))
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
df1 <- read.csv("Personality_Data_1", header = T)
df1 <- read.csv("Personality_Data_1.csv", header = T)
View(df1)
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
View(df1)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 2)
View(df2)
na.omit(df2)
View(df2)
df2 <- df2[-58:997,]
df2 <- df2[-(58:997),]
View(df2)
View(df1)
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
# Read the first csv file, set the header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 2)
df2 <- df2[-(58:997),]
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
# Read the first csv file, set the header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 2)
df2 <- df2[-(58:997),]
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the first csv file, set the header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 2)
df2 <- df2[-(58:997),]
df1 <-
df1 <- df1 %>% select(-Obs)
View(df1)
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the first csv file, set the header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the first csv file, set the header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T)
View(df2)
# Read the second csv file, set the header as true, and skip over the first line in the file because it is blank
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 1)
View(df2)
df2 <- df2[-(58:998),]
View(df2)
View(df2)
df2 <- df2 %>% select(-No)
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the csv file, set header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 1)
df2 <- df2[-(58:998),]
df1 <- df1 %>% select(-Obs)
df2 <- df2 %>% select(-No)
View(df2)
combined_data <- left_join(df1, df2, by = "Global_ID")
View(combined_data)
combined_data <- inner_join(df1, df2, by = "Global_ID")
View(combined_data)
combined_data <- left_join(df1, df2, by = "Global_ID")
View(combined_data)
combined_data <- full_join(df1, df2, by = "Global_ID")
combined_data <- df %>% rbind(df2)
combined_data <- full_join(df1, df2, by = "Global_ID")
combined_data <- left_join(df1, df2, by = "Global_ID")
combined_data <- right_join(df1, df2, by = "Global_ID")
combined_data <- inner_join(df1, df2, by = "Global_ID")
View(df1)
combined_data <- left_join(df1, df2, by = "Global_ID")
df1 <- df1 %>% select(Global_ID, Semester_ID, Class_ID class_ID_Type, F16_ERP_ID )
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the csv file, set header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 1)
# Remove lines 58-98 from data frame 2
df2 <- df2[-(58:998),]
df1 <- df1 %>% select(-Obs)
df2 <- df2 %>% select(-No)
View(df1)
combined_df <- left_join(df1, df2, by ="Global_ID")
View(combined_df)
View(combined_df)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the csv file, set header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 1)
# Remove lines 58-98 from data frame 2
df2 <- df2[-(58:998),]
df1 <- df1 %>% select(-Obs)
df2 <- df2 %>% select(-No)
setdiff(df1, df2)
semi_join(df2, df1)
df3 <- semi_join(df2, df1)
df3 <- semi_join(df1, df2)
df3 <- semi_join(df2, df1)
df3 <- anti_join(df2, df1)
df3 <- anti_join(df1, df2)
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library("sqldf")
library("sqldf")
a1NotIna2 <- sqldf('SELECT * FROM df1 EXCEPT SELECT * FROM df2')
library("sqldf")
a1NotIna2 <- sqldf('SELECT * FROM df2 EXCEPT SELECT * FROM df1')
merge(df,df2, by.x="df1", by.y="df2", sort=F)
merge(df1,df2, by.x="df1", by.y="df2", sort=F)
merge(df1,df2, by.x="Global_ID", by.y="Global_ID", sort=F)
df3 <- merge(df1,df2, by.x="Global_ID", by.y="Global_ID", sort=F)
df3 <- merge(df1,df2, by.x="Global_ID", by.y="Global_ID", sort=F)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(dplyr)
library(magrittr)
# Read the csv file, set header as true, and skip over the first line in the file because it is blank
df1 <- read.csv("Personality_Data_1.csv", header = T, skip = 1)
df2 <- read.csv("Personality_Data_2.csv", header = T, skip = 1)
# Remove lines 58-98 from data frame 2
df2 <- df2[-(58:998),]
df1 <- df1 %>% select(-Obs)
df2 <- df2 %>% select(-No)
# df
setdiff(df1, df2)
# setdiff(df1, df2)
combined_df <- as.data.frame(lapply(intersect(names(df1), names(df2)),
function(name) df1[name] + df2[name]))
# setdiff(df1, df2)
combined_df <- merge(rbind(df1, X=rownames(df1)), rbind(df2, variable=rownames(df2)))
# setdiff(df1, df2)
combined_df <- merge(cbind(df1, X=rownames(df1)), cbind(df2ariable=rownames(df2)))
View(combined_df)
# setdiff(df1, df2)
combined_df <- merge(cbind(df1, X=rownames(df1)), cbind(df2, variable=rownames(df2)))
# setdiff(df1, df2)
combined_df <- merge(cbind(df1, X=rownames(df1)), cbind(df2, variable=rownames(df2)))
# setdiff(df1, df2)
combined_df <- merge(cbind(df1, X=rownames(df1)), cbind(variable=rownames(df2)))
# setdiff(df1, df2)
combined_df <- merge(cbind(X=rownames(df1)), cbind(variable=rownames(df2)))
View(combined_df)
View(combined_df)
# setdiff(df1, df2)
combined_df <- merge(rbind(X=rownames(df1)), rbind(variable=rownames(df2)))
View(combined_df)
# setdiff(df1, df2)
combined_df <- merge(cbind(df1), cbind(df2))
# setdiff(df1, df2)
combined_df <- merge(rbind(df1), rbind(df2))
setdiff(df1, df2)
dif <- setdiff(df1, df2)
dif <- setdiff(df1, df2)
merge(cbind(df1, X=rownames(df1)), cbind(df2, variable=rownames(df2)))
merge(cbind(df2, X=rownames(df2)), cbind(df1, variable=rownames(df1)))
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
bike_df <- read.csv("DC_bike_rental.csv", header = T)
bike_df <- read.csv("DC_bike_rental.csv", header = T)
bike_df <- read.csv("DC_bike_rental.csv.csv", header = T)
bike_df <- read.csv("DC_Bike_Rental.csv", header = T)
bike_df <- read.csv("DC_Bike_Rental.csv.csv", header = T)
bike_df <- read.csv("DC_Bike_Rentals.csv", header = T)
print(str(bike_df))
# print(str(bike_df))
str(bike_df)
print(str(bike_df))
str(bike_df)
print(str(bike_df))
View(bike_df)
View(bike_df)
View(bike_df)
library(magrittr)
?lapply()
factor_cols <- bike_df %>% c("hour")
View(factor_cols)
factor_cols <- bike_df %>% c(hour, season, holiday, workingday, weather)
View(bike_df)
factor_cols <- bike_df %>% c("hour", "season", "holiday", "workingday", "weather")
factor_cols <- c("hour", "season", "holiday", "workingday", "weather")
bike_df[factor_cols] <- lapply(bike_df[factor_cols], factor)
View(bike_df)
str(bike_df)
# Choose variables to coerce to factors
factor_cols <- c("hour", "season", "holiday", "workingday", "weather")
# Convert variables to factors
bike_df[factor_cols] <- lapply(bike_df[factor_cols], factor)
print(str(bike_df))
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
library(magrittr)
bike_df <- read.csv("DC_Bike_Rentals.csv", header = T)
# Explore data
head(bike_df)
print(str(bike_df))
# Choose variables to coerce to factors
factor_cols <- c("hour", "season", "holiday", "workingday", "weather")
# Convert variables to factors
bike_df[factor_cols] <- lapply(bike_df[factor_cols], factor)
print(str(bike_df))
library(stargazer)
stargazer(bike_df)
library(caret)
fit_control <- trainControl(method = "cv", number = 10)
multi_fit <- train(count ~ ., data = bike_df[-1],
trControl = fitControl,
method="lm", verbose = F)
fit_control <- trainControl(method = "cv", number = 10)
multi_fit <- train(count ~ ., data = bike_df[-1],
trControl = fit_control,
method="lm", verbose = F)
# Remove na values
bike_df <- na.omit(bike_df)
bike_df <- read.csv("DC_Bike_Rentals.csv", header = T)
# Remove na values
bike_df <- na.omit(bike)
# Remove na values
bike_df <- na.omit(bike_df)
bike_df <- read.csv("DC_Bike_Rentals.csv", header = T)
# Remove na values
bike_df <- na.omit(bike_df)
# Explore data
head(bike_df)
multi_fit <- train(count ~ ., data = bike_df[-1],
trControl = fit_control,
method="lm", verbose = F)
multi_fit <- train(count ~ ., data = bike_df[-1],
trControl = fit_control,
method="lm")
# Train model
multi_fit <- train(count ~ ., data = bike_df[-1],
trControl = fit_control,
method="lm")
# Show results
print(multi_fit)
?confusionMatrix()
confusionMatrix(multi_fit)
View(bike_df)
# Train model
multi_fit <- train(count ~ ., data = bike_df,
trControl = fit_control,
method="lm")
# Show results
print(multi_fit)
# Train model
multi_fit <- train(count ~ ., data = bike_df[-1],
trControl = fit_control,
method="lm")
# Show results
print(multi_fit)
# Train model
multi_fit <- train(count ~ ., data = bike_df,
trControl = fit_control,
method="lm")
# Show results
print(multi_fit)
GBM_fit <- train(count ~ ., data = bike_df,
trControl = fit_control,
method = "GBM", verbose = F)
GBM_fit <- train(count ~ ., data = bike_df,
trControl = fit_control,
method = "gbm", verbose = F)
