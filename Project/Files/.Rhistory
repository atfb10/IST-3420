number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(dir_rating_df) <- c("director_name", "avg_score", "num_of_movies") # Rename headers
dir_avg <- dir_rating_df[which(dir_rating_df$num_of_movies >= 7),]# Direct  at least 7 movies to avoid skew
dir_avg <- dir_avg[which(dir_avg$avg_score >= 7.5),] # Show only highest scoring directors for readability
dir_avg <- dir_avg[which(dir_avg$director_name != ''),] # Exclude movies who have no director name
# Convert actor_name to a factor
dir_avg$director_name <- factor(dir_avg$director_name)
# Show highest to lowest average score
dir_avg$director_name <- reorder(dir_avg$director_name, dir_avg$avg_score)
# Visualization of highest scoring actors
ggplot(dir_avg, aes(x = avg_score, y = director_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = director_name)) + # Makes a point graph with different colors per director
theme(axis.text = element_text(size = 10, colour = 'black')) + # Sets font size
ggtitle("Director Scores") +  # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Director Name") # Changes y field table
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE), # Creates column containing mean scores
length(na.omit(imdb_score))) # Omits scores with NA values
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) + # Bar graph with x as rating and y as score
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') + # Creates space between bars and changes color
theme(axis.text = element_text(size = 8, colour = 'black', angle = 45)) + # Sets text size to 8, text color to black, and angles text for separation purposes
ggtitle("Content Scores") + # Title of graph
xlab("Content Rating") + # Title of x axis
ylab("IMDB Score") # Title of y axis
# Create data frame that excludes movies with no content rating
content_df2 <- movie_df[which(movie_df$content_rating != ''), ]
#Use plotly for great boxplot capabilities, note: Might need to install "plotly"
plot_ly(content_df2, x = content_df2$imdb_score, color = content_df2$content_rating, type = "box") %>%
layout(title = "Movie Type and Score Range")
# Create df with face numbers in poster and respective average score
face_df <- movie_df %>%
group_by(face_count = facenumber_in_poster) %>%
summarise(avg_score = mean(imdb_score)) %>%
na.omit() # Omit NA values
# Bar Graph of data
ggplot(face_df, aes(x = face_count, y = avg_score)) +
geom_bar(stat = "identity", width = .5, fill = "deepskyblue3") +
xlab("Number of Faces") +
ylab("Average Score") +
ggtitle("Average Score by faces in poster") +
theme(axis.text = element_text(size = 8, angle = 0))
# Create Data Frame with average score and color
color_film <- movie_df %>%
select(color, imdb_score) %>% na.omit()
ggplot(color_film, aes(x = color, y = imdb_score, group = color, fill = color)) +
geom_boxplot() +
xlab("Color Type") +
ylab("Score") +
ggtitle("Black and White vs Color Film Scores")
language_df <- movie_df %>%
group_by(language) %>%
summarise(avg_score = mean(imdb_score)) %>% na.omit()
ggplot(language_df, aes(x = language, y = avg_score)) +
geom_bar(stat = "Identity", width = .5, fill = "deepskyblue3") +
theme(axis.text = element_text(size = 10, angle = 90)) +
xlab("Original Language") +
ylab("Average Score") +
ggtitle("Language and Score")
# Load in world map from map_data
world_countries <- map_data("world2")
ScoreByCountry_df <- movie_df %>%
group_by(country) %>%
summarise(avg_score = mean(imdb_score)) %>% na.omit()
score_plot <- ggplot()
score_plot <- score_plot + geom_map(data = world_countries, map = world_countries,
aes(x = long, y = lat, map_id = region),
fill="white", color="black", size=0.15)
score_plot <- score_plot + geom_map(data = ScoreByCountry_df, map = world_countries,
aes(fill = avg_score, map_id = country),
color="black", size=0.15)
score_plot <- score_plot + scale_fill_continuous(low = "thistle2", high = "darkred", guide = 'colorbar')
score_plot <- score_plot + labs(fill = "Average IMDb Score",
title = "Average IMDb Score by Country",
x="", y="")
score_plot <- score_plot + theme(panel.border = element_blank())
score_plot <- score_plot + theme(axis.ticks = element_blank())
score_plot <- score_plot + theme(axis.text = element_blank())
score_plot
#movie_likes <- movie_df %>% select(movie_facebook_likes, imdb_score, content_rating)
plot_ly(movie_df, x = movie_df$movie_facebook_likes, y = movie_df$imdb_score,
color =movie_df$content_rating , mode = "markers",text=paste('Content:',movie_df$content_rating))
rm(list = ls()[!ls() %in% c("movie_df")])
library(corrplot)
numeric_df <- select_if(movie_df, is.numeric) # Other option cor(movie_df[sapply(movie_df, is.numeric)])
# Creates a correlation table showing variables correlate w/ each other by number and text color
num_correlation <- round(cor(numeric_df, use = "pairwise.complete.obs", method = "pearson"),1)
corrplot(num_correlation, method = "number", type = )
# Note: After running this chunk, you can also select hte num_correlation item from the global environment to view a generic table
# Creates a correlation table showing variables correlate w/ each other by color and  circle size
corrplot(num_correlation, method = "circle")
rm(list = ls()[!ls() %in% c("movie_df")])
str(movie_df)
movie_df <- movie_df %>% na.omit()
movie_df$dicaprio <- ifelse(movie_df$actor_1_name == "Leonardo DiCaprio", 1, 0)
movie_df$hanks <- ifelse(movie_df$actor_1_name == "Tom Hanks", 1, 0)
movie_df$eastwood <- ifelse(movie_df$actor_1_name == "Clint Eastwood", 1, 0)
movie_df$hardy <- ifelse(movie_df$actor_1_name == "Tom Hardy", 1, 0)
movie_df$rickman <- ifelse(movie_df$actor_1_name == "Alan Rickman", 1, 0)
movie_df$cumberbatch <- ifelse(movie_df$actor_1_name == "Benedict Cumberbatch", 1, 0)
movie_df$bale <- ifelse(movie_df$actor_1_name == "Christian Bale", 1, 0)
movie_df$hoffman <- ifelse(movie_df$actor_1_name == "Philip Seymour Hoffman", 1, 0)
movie_df$driver <- ifelse(movie_df$actor_1_name == "Minni Driver", 1, 0)
movie_df$ford <- ifelse(movie_df$actor_1_name == "Harrison Ford", 1, 0)
movie_df$spacy <- ifelse(movie_df$actor_1_name == "Kevin Spacey", 1, 0)
movie_df$nolan <- ifelse(movie_df$director_name == "Christopher Nolan", 1, 0)
movie_df$tarantino <- ifelse(movie_df$director_name == "Quentin Tarantino", 1, 0)
movie_df$cameron <- ifelse(movie_df$director_name == "James Cameron", 1, 0)
movie_df$jackson <- ifelse(movie_df$director_name == "Peter Jackson", 1, 0)
movie_df$fincher <- ifelse(movie_df$director_name == "David Fincher", 1, 0)
movie_df$scorsese <- ifelse(movie_df$director_name == "Martin Scorsese", 1, 0)
movie_df$anderson <- ifelse(movie_df$director_name == "Wes Anderson", 1, 0)
movie_df$Greengrass <- ifelse(movie_df$director_name == "Paul Greengrass", 1, 0)
library(MASS)
# Fit the model
score_fit <- lm(imdb_score ~ + country + content_rating + color + title_year + language +
facenumber_in_poster + gross + dicaprio + hanks + eastwood + hardy +
rickman + cumberbatch + bale + hoffman + driver + ford + spacy + nolan +
tarantino + cameron + jackson + fincher + scorsese + anderson + Greengrass,
data = movie_df)
# Perform stepwise model seleciton
score_step <- stepAIC(score_fit, direction = "both")
# Show resultsd
score_step$Anova
# Create multiple linear regression model
final_linear <- lm(imdb_score ~ country + content_rating + color + title_year +
language + facenumber_in_poster + gross + dicaprio + hanks +
eastwood + hardy + rickman + cumberbatch + bale + hoffman +
driver + ford + spacy + nolan + tarantino + cameron + jackson +
fincher + scorsese + anderson + Greengrass, data = movie_df)
# Show the summary of the multiple linear regression model
summary(final_linear)
detach("package:MASS", unload = F)
library(caret)
fit_control <- trainControl(method = "cv", number = 10)
dtree_fit <- train(imdb_score ~ country + content_rating + color + title_year +
language + facenumber_in_poster + gross + dicaprio + hanks +
eastwood + hardy + rickman + cumberbatch + bale + hoffman +
driver + ford + spacy + nolan + tarantino + cameron + jackson +
fincher + scorsese + anderson + Greengrass,
data = movie_df,
method = "rpart",
trControl = fit_control,
tuneLength = 20,
parms=list(split='information'))
print(dtree_fit)
# Might need to install package rpart.plot
# Output the final model for the decision tree
rpart.plot::rpart.plot(dtree_fit$finalModel)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
rm(list = ls())
require(ggplot2)
require(dplyr)
require(magrittr)
df <- read.csv("cup98LRN.txt", header = TRUE)
subDf <- df %>% select(TARGET_B, VETERANS, HOMEOWNR, BIBLE, WEALTH2, GENDER, STATE, INCOME, AGE, POP901, RAMNTALL, NGIFTALL, TIMELAG)
subDf$TARGET_B <- as.factor(subDf$WEALTH2)
subDf$WEALTH2 <- as.factor(subDf$WEALTH2)
str(subDf)
table(subDf$TARGET_B)
require(corrplot)
# Create a further subset of only numeric data
numericSub <- select_if(subDf, is.numeric)
# Creates a correlation table showing variables correlate w/ each other by number and text color. Values Rounded to 1
num_correlation <- round(cor(numericSub, use = "pairwise.complete.obs", method = "pearson"),1)
corrplot(num_correlation, method = "number")
require(caret)
require(e1071)
require(rpart)
require(rpart.plot)
fit_control <- trainControl(method = "cv", number = 10)
# Remove na's to make modeling possible
noNaSub <- na.omit(subDf)
decisionTree <- train(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE +
INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
data = noNaSub,
method = "rpart",
trControl = fit_control,
tuneLength = 10,
parms=list(split='information'))
print(decisionTree)
rpart.plot::rpart.plot(decisionTree$finalModel)
tree <- rpart.plot::rpart.plot(decisionTree$finalModel)
prp(tree)
tree <- rpart.plot(decisionTree$finalModel)
prp(tree)
tree
stargazer(tree)
install.packages("stargazer")
install.packages("stargazer")
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
require(stargazer)
stargazer(tree)
rpart::rpart.plot(decisionTree$finalModel)
rpart.plot::rpart.plot(decisionTree$finalModel)
# Remove na's to make modeling possible
set.seed(1234)
noNaSub <- na.omit(subDf)
decisionTree <- train(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE +
INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
data = noNaSub,
method = "rpart",
trControl = fit_control,
tuneLength = 10,
parms=list(split='information'))
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
rm(list = ls())
require(ggplot2)
require(dplyr)
require(magrittr)
df <- read.csv("cup98LRN.txt", header = TRUE)
subDf <- df %>% select(TARGET_B, VETERANS, HOMEOWNR, BIBLE, WEALTH2, GENDER, STATE, INCOME, AGE, POP901, RAMNTALL, NGIFTALL, TIMELAG)
subDf$TARGET_B <- as.factor(subDf$WEALTH2)
subDf$WEALTH2 <- as.factor(subDf$WEALTH2)
str(subDf)
table(subDf$TARGET_B)
require(corrplot)
# Create a further subset of only numeric data
numericSub <- select_if(subDf, is.numeric)
# Creates a correlation table showing variables correlate w/ each other by number and text color. Values Rounded to 1
num_correlation <- round(cor(numericSub, use = "pairwise.complete.obs", method = "pearson"),1)
corrplot(num_correlation, method = "number")
require(caret)
require(e1071)
require(rpart)
require(rpart.plot)
fit_control <- trainControl(method = "cv", number = 10)
logFit <- glm(TARGET_B ~ SeniorCitizen + Dependents + Tenure + MultipleLines + InternetService + OnlineSecurity + OnlineBackup + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
family=binomial(link='logit'),
data = telecom_df)
# Remove na's to make modeling possible
set.seed(1234)
noNaSub <- na.omit(subDf)
decisionTree <- train(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE +
INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
data = noNaSub,
method = "rpart",
trControl = fit_control,
tuneLength = 10,
parms=list(split='information'))
print(decisionTree)
# Remove na's to make modeling possible
noNaSub <- na.omit(subDf)
# Set seed to obtain same results each time
set.seed(1234)
decisionTree <- train(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE +
INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
data = noNaSub,
method = "rpart",
trControl = fit_control,
tuneLength = 10,
parms=list(split='information'))
print(decisionTree)
rpart.plot::rpart.plot(decisionTree$finalModel)
# Remove na's to make modeling possible
noNaSub <- na.omit(subDf)
# Set seed to obtain same results each time
set.seed(1234)
decisionTree <- train(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE +
INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
data = noNaSub,
method = "rpart",
trControl = fit_control,
tuneLength = 6,
parms=list(split='information'))
print(decisionTree)
rpart.plot::rpart.plot(decisionTree$finalModel)
# Remove na's to make modeling possible
noNaSub <- na.omit(subDf)
# Set seed to obtain same results each time
set.seed(1234)
decisionTree <- train(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE +
INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
data = noNaSub,
method = "rpart",
trControl = fit_control,
tuneLength = 10,
parms=list(split='information'))
print(decisionTree)
rpart.plot::rpart.plot(decisionTree$finalModel)
logFit <- glm(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE
+ INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
family=binomial(link='logit'),
data = telecom_df)
logFit <- glm(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE
+ INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
family=binomial(link='logit'),
data = subDf)
logFit <- glm(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE
+ INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
family=binomial(link='logit'),
control = list(maxit = 100)
data = subDf)
logFit <- glm(TARGET_B ~ VETERANS + HOMEOWNR + BIBLE + WEALTH2 + GENDER + STATE
+ INCOME + AGE + POP901 + RAMNTALL + NGIFTALL + TIMELAG,
family=binomial(link='logit'),
control = list(maxit = 100),
data = subDf)
knitr::opts_chunk$set(echo = TRUE, message = F)
rm(list = ls())
# Note: User may need install packages if they have not previously used them
library(magrittr)
library(plyr)
library(dplyr)
movie_df <- read.csv("movie_metadata CSV.csv", header = TRUE)
# Change blank spaces to NA
movie_df[movie_df==""] <- NA
print(str(movie_df))
count(movie_df[!(is.na(movie_df$movie_title)) & !(is.na(movie_df$imdb_score)), ])
movie_df$color <- ifelse(movie_df$color == "Color", 1, 0)
movie_df$color <- as.factor(movie_df$color)
movie_df$facenumber_in_poster <- as.factor(movie_df$facenumber_in_poster)
movie_df$title_year <- as.factor(movie_df$title_year)
# Create new vector, positive means budget was lower than gross, negative means that budget exceeds gross
movie_df$gross_profit <- movie_df$gross - movie_df$budget
# Remove the Â at the end of the titles
movie_df$movie_title <- gsub("Â", "", movie_df$movie_title)
# trim whitespace
movie_df$movie_title <- trimws(movie_df$movie_title)
# Show number of unique titles
length(unique(movie_df$movie_title))
# Show number of duplicated titles
anyDuplicated(movie_df$movie_title)
# statement will remove movies if they have duplicate titles, directors, release years and release years
movie_df <- movie_df %>% distinct(movie_title, director_name, title_year, .keep_all = T)
str(movie_df)
library(stargazer)
stargazer(movie_df, type = "text", title = "Movie Data frame Summary Statistics")
# Stargazer only shows statistics for non categorical and character types
# Note: plotly package graphs are interactive
library(plotly)
library(ggplot2)
# Kernel density plot
score_density <- density(movie_df$imdb_score) # Calculate kernel density estimate
plot(score_density, type = "n", main = "Kernel Density Estimate of Movie Scores")
polygon(score_density, col = "wheat")
# Create data frame with year and average score
yearly_score <- ddply(movie_df, c("title_year"), summarise,
mean(imdb_score, na.rm = TRUE))
colnames(yearly_score) <- c("title_year", "avg_score")
# Plotly line graph that shows average imdb scores across the years
plot_ly(yearly_score, x = yearly_score$title_year, y = yearly_score$avg_score, type = "scatter", mode = "lines") %>%
layout(title = "Year and Score")
movie_yearly_count <- movie_df %>%
group_by(title_year) %>%
summarise(yearly_total = sum(length(title_year)))
sum(movie_yearly_count$yearly_total)
plot_ly(movie_yearly_count,
x = movie_yearly_count$title_year, y = movie_yearly_count$yearly_total, type = "scatter", mode = "lines") %>%
layout(title = "Total films released by year")
# Plot skips some years along the x-axis, but this was for spacing; the interacting with the chart will show count for every year
# Find actors with highest average movie score
actor_rating_df <- ddply(movie_df, c("actor_1_name"), summarise, # Pull out actor 1 and rating data
actor_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of actors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(actor_rating_df) <- c("actor_name", "avg_score", "num_of_movies") # Rename headers
actor_avg <- actor_rating_df[which(actor_rating_df$num_of_movies >= 7),]# Actors in at least 7 movies to avoid skew
actor_avg <- actor_avg[which(actor_avg$avg_score >= 7.15),] # Show only highest scoring actors for readability
# Convert actor_name to a factor
actor_avg$actor_name <- factor(actor_avg$actor_name)
# Show highest to lowest average score
actor_avg$actor_name <- reorder(actor_avg$actor_name, actor_avg$avg_score)
# Visualization of highest scoring actors
ggplot(actor_avg, aes(x = avg_score, y = actor_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = actor_name)) + # Makes a point graph with different colors per actor
theme(axis.text = element_text(size = 10)) + # Sets font size
ggtitle("Actor Scores") + # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Actor Name")  # Changes y field table
# Find actors with highest average movie score
dir_rating_df <- ddply(movie_df, c("director_name"), summarise, # Pull out director name and rating data
dir_m <- mean(imdb_score, na.rm = TRUE),  # Find the mean of directors and discount na values
number <- length(na.omit(imdb_score))) # Count number of movies, but omit na values
colnames(dir_rating_df) <- c("director_name", "avg_score", "num_of_movies") # Rename headers
dir_avg <- dir_rating_df[which(dir_rating_df$num_of_movies >= 7),]# Direct  at least 7 movies to avoid skew
dir_avg <- dir_avg[which(dir_avg$avg_score >= 7.5),] # Show only highest scoring directors for readability
dir_avg <- dir_avg[which(dir_avg$director_name != ''),] # Exclude movies who have no director name
# Convert actor_name to a factor
dir_avg$director_name <- factor(dir_avg$director_name)
# Show highest to lowest average score
dir_avg$director_name <- reorder(dir_avg$director_name, dir_avg$avg_score)
# Visualization of highest scoring actors
ggplot(dir_avg, aes(x = avg_score, y = director_name)) + # Sets x to average score and y to the name
geom_point(aes(colour = director_name)) + # Makes a point graph with different colors per director
theme(axis.text = element_text(size = 10, colour = 'black')) + # Sets font size
ggtitle("Director Scores") +  # Changes chart title
xlab("Average Score") + # Changes x field title
ylab("Director Name") # Changes y field table
content_df <- ddply(movie_df, c("content_rating"), summarise, # New DF w/ rating, avg score and # of movies
mean(imdb_score, na.rm = TRUE), # Creates column containing mean scores
length(na.omit(imdb_score))) # Omits scores with NA values
colnames(content_df) <- c("content_rating", "avg_score", "number_of_films") # Rename columns
content_df <- content_df[which(content_df$content_rating != ""),] # Eliminate films from analysis without rating
# Visualization of average score by content rating
ggplot(content_df, aes(x = content_rating, y = avg_score)) + # Bar graph with x as rating and y as score
geom_bar(stat = "identity", width = .5, fill = 'deepskyblue3') + # Creates space between bars and changes color
theme(axis.text = element_text(size = 8, colour = 'black', angle = 45)) + # Sets text size to 8, text color to black, and angles text for separation purposes
ggtitle("Content Scores") + # Title of graph
xlab("Content Rating") + # Title of x axis
ylab("IMDB Score") # Title of y axis
# Create data frame that excludes movies with no content rating
content_df2 <- movie_df[which(movie_df$content_rating != ''), ]
#Use plotly for great boxplot capabilities, note: Might need to install "plotly"
plot_ly(content_df2, x = content_df2$imdb_score, color = content_df2$content_rating, type = "box") %>%
layout(title = "Movie Type and Score Range")
# Create df with face numbers in poster and respective average score
face_df <- movie_df %>%
group_by(face_count = facenumber_in_poster) %>%
summarise(avg_score = mean(imdb_score)) %>%
na.omit() # Omit NA values
# Bar Graph of data
ggplot(face_df, aes(x = face_count, y = avg_score)) +
geom_bar(stat = "identity", width = .5, fill = "deepskyblue3") +
xlab("Number of Faces") +
ylab("Average Score") +
ggtitle("Average Score by faces in poster") +
theme(axis.text = element_text(size = 8, angle = 0))
# Create Data Frame with average score and color
color_film <- movie_df %>%
select(color, imdb_score) %>% na.omit()
ggplot(color_film, aes(x = color, y = imdb_score, group = color, fill = color)) +
geom_boxplot() +
xlab("Color Type") +
ylab("Score") +
ggtitle("Black and White vs Color Film Scores")
language_df <- movie_df %>%
group_by(language) %>%
summarise(avg_score = mean(imdb_score)) %>% na.omit()
ggplot(language_df, aes(x = language, y = avg_score)) +
geom_bar(stat = "Identity", width = .5, fill = "deepskyblue3") +
theme(axis.text = element_text(size = 10, angle = 90)) +
xlab("Original Language") +
ylab("Average Score") +
ggtitle("Language and Score")
# Load in world map from map_data
world_countries <- map_data("world2")
ScoreByCountry_df <- movie_df %>%
group_by(country) %>%
summarise(avg_score = mean(imdb_score)) %>% na.omit()
score_plot <- ggplot()
score_plot <- score_plot + geom_map(data = world_countries, map = world_countries,
aes(x = long, y = lat, map_id = region),
fill="white", color="black", size=0.15)
score_plot <- score_plot + geom_map(data = ScoreByCountry_df, map = world_countries,
aes(fill = avg_score, map_id = country),
color="black", size=0.15)
score_plot <- score_plot + scale_fill_continuous(low = "thistle2", high = "darkred", guide = 'colorbar')
score_plot <- score_plot + labs(fill = "Average IMDb Score",
title = "Average IMDb Score by Country",
x="", y="")
score_plot <- score_plot + theme(panel.border = element_blank())
score_plot <- score_plot + theme(axis.ticks = element_blank())
score_plot <- score_plot + theme(axis.text = element_blank())
score_plot
#movie_likes <- movie_df %>% select(movie_facebook_likes, imdb_score, content_rating)
plot_ly(movie_df, x = movie_df$movie_facebook_likes, y = movie_df$imdb_score,
color =movie_df$content_rating , mode = "markers",text=paste('Content:',movie_df$content_rating))
rm(list = ls()[!ls() %in% c("movie_df")])
library(corrplot)
numeric_df <- select_if(movie_df, is.numeric) # Other option cor(movie_df[sapply(movie_df, is.numeric)])
# Creates a correlation table showing variables correlate w/ each other by number and text color
num_correlation <- round(cor(numeric_df, use = "pairwise.complete.obs", method = "pearson"),1)
corrplot(num_correlation, method = "number", type = )
# Note: After running this chunk, you can also select hte num_correlation item from the global environment to view a generic table
# Creates a correlation table showing variables correlate w/ each other by color and  circle size
corrplot(num_correlation, method = "circle")
rm(list = ls()[!ls() %in% c("movie_df")])
str(movie_df)
movie_df <- movie_df %>% na.omit()
movie_df$dicaprio <- ifelse(movie_df$actor_1_name == "Leonardo DiCaprio", 1, 0)
movie_df$hanks <- ifelse(movie_df$actor_1_name == "Tom Hanks", 1, 0)
movie_df$eastwood <- ifelse(movie_df$actor_1_name == "Clint Eastwood", 1, 0)
movie_df$hardy <- ifelse(movie_df$actor_1_name == "Tom Hardy", 1, 0)
movie_df$rickman <- ifelse(movie_df$actor_1_name == "Alan Rickman", 1, 0)
movie_df$cumberbatch <- ifelse(movie_df$actor_1_name == "Benedict Cumberbatch", 1, 0)
movie_df$bale <- ifelse(movie_df$actor_1_name == "Christian Bale", 1, 0)
movie_df$hoffman <- ifelse(movie_df$actor_1_name == "Philip Seymour Hoffman", 1, 0)
movie_df$driver <- ifelse(movie_df$actor_1_name == "Minni Driver", 1, 0)
movie_df$ford <- ifelse(movie_df$actor_1_name == "Harrison Ford", 1, 0)
movie_df$spacy <- ifelse(movie_df$actor_1_name == "Kevin Spacey", 1, 0)
movie_df$nolan <- ifelse(movie_df$director_name == "Christopher Nolan", 1, 0)
movie_df$tarantino <- ifelse(movie_df$director_name == "Quentin Tarantino", 1, 0)
movie_df$cameron <- ifelse(movie_df$director_name == "James Cameron", 1, 0)
movie_df$jackson <- ifelse(movie_df$director_name == "Peter Jackson", 1, 0)
movie_df$fincher <- ifelse(movie_df$director_name == "David Fincher", 1, 0)
movie_df$scorsese <- ifelse(movie_df$director_name == "Martin Scorsese", 1, 0)
movie_df$anderson <- ifelse(movie_df$director_name == "Wes Anderson", 1, 0)
movie_df$Greengrass <- ifelse(movie_df$director_name == "Paul Greengrass", 1, 0)
library(MASS)
# Fit the model
score_fit <- lm(imdb_score ~ + country + content_rating + color + title_year + language +
facenumber_in_poster + gross + dicaprio + hanks + eastwood + hardy +
rickman + cumberbatch + bale + hoffman + driver + ford + spacy + nolan +
tarantino + cameron + jackson + fincher + scorsese + anderson + Greengrass,
data = movie_df)
# Perform stepwise model seleciton
score_step <- stepAIC(score_fit, direction = "both")
# Show resultsd
score_step$Anova
# Create multiple linear regression model
final_linear <- lm(imdb_score ~ country + content_rating + color + title_year +
language + facenumber_in_poster + gross + dicaprio + hanks +
eastwood + hardy + rickman + cumberbatch + bale + hoffman +
driver + ford + spacy + nolan + tarantino + cameron + jackson +
fincher + scorsese + anderson + Greengrass, data = movie_df)
# Show the summary of the multiple linear regression model
summary(final_linear)
detach("package:MASS", unload = F)
library(caret)
